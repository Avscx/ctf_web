汇编基础（一）
1，处理器的作用：
从内存中获取机器语言指令，译码，执行；
根据指令代码管理它自己的寄存器；
根据指令或自己的需要修改内存的内容；
响应其他硬件的中断请求。

2，寄存器的作用：
寄存器位于CPU中，可以保存特定长度的数据。某些寄存器中保存的数据对于系统的运行有特殊的意义。
寄存器可以被装入数据，你可以在不同寄存器之间移动这些数据，或者做类似的事情，如四则运算、位运算等操作。

3，通用寄存器类型：
EAX，常用于进行运算；
EBX，常用作内存偏移指针；
ECX,通常用于特定指令的计数；
EDX,在某些运算中作为EAX的溢出寄存器;
ESI,通常在内存操作指令中作为源地址指针使用;
EDI,通常在内存操作指令中作为目的地址指针使用;
EBP,通常作为内存偏移指针使用;
PS:ESI,EDI,EBP没有对应的8-bit分组，但可以通过SI、DI，BP分别访问他们的低16位，其余的有对应的16-bit 和8-bit分组。

4，段寄存器和选择器
实模式下的段寄存器到保护模式下，摇身一变就成了选择器。不同的是，实模式下的段选择器是16-bit的，而保护模式下的选择器是32-bit的。
CS，代码段，或代码选择器。同IP寄存器一同指向当前正在执行的地址。处理器执行时从这个寄存器指向的段（实模式）或内存（保护模式）中获取指令。除了跳转或其他分支指令外，你无法修改这个寄存器的内容。
DS，数据段，或数据选择器。这个寄存器的低16-bit连同ESI一同指向指令将要执行的内存。同时，所有的内存操作指令默认情况下都用它指定操作段（实模式）或内存（保护模式下作为选择器）。这个寄存器可被装入任意数值，做法是先把数据给AX，在把它从AX传送给DS。当然也可通过堆栈来做。
ES，附加段，或附加选择器。这个寄存器的低16-bit连同EDI一同指向指令将要处理的内存。其他同DS。
FS，F段或F选择器。可以用这个寄存器作为默认段寄存器或选择器的一个替代品。
GS，G段或G选择器。它和FS几乎完全一样。
SS，堆栈段或堆栈选择器。这个寄存器的低16-bit连同ESP一同指向下一次堆栈操作（push和pop）所要使用的堆栈地址。这个寄存器也可以被装入任意数值，可通过入栈和出站操作来赋值。
注意，一定不要在初学汇编阶段把这些寄存器弄混。段寄存器或选择器，在没有指定的情况下都是使用默认的那个。这句话在现在看来可能有点稀里糊涂，不过你很快会在后面知道如何去做。

5，特殊寄存器
EIP，32-bit，这个寄存器非常重要，同CS一同指向即将执行的那条指令的地址。不能够直接修改这个寄存器的值，修改它的唯一方法是跳转或分支指令。（CS是默认的段或选择器）
ESP，32-bit，这个寄存器指向堆栈中即将被操作的那个地址。尽管可以修改它的值，但并不提倡这样做，可能会破坏堆栈。（SS是默认的段或选择器）
IP： Instruction Pointer，指令指针。
SP： Stack Pointer，堆栈指针。


